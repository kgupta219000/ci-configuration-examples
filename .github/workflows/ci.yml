# This is a basic workflow to help you get started with MATLAB Actions

name: MATLAB Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # runs:
    container:
    # using: 'docker'
      image: 'mathworks/matlab'
      volumes:
        - ${{ github.workspace }}:/app

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Sets up MATLAB on the GitHub Actions runner
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v1

      # Runs a set of commands using the runners shell
#       - name: Run all tests
#         uses: matlab-actions/run-tests@v1
#         with:
#           source-folder: code

      - name: Run MATLAB tests and generate artifacts
        uses: matlab-actions/run-tests@v1
        with:
          source-folder: code
          test-results-junit: test-results/results.xml
          code-coverage-cobertura: code-coverage/coverage.xml

      - name: Upload test results artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-restuls
          path: test-results/results.xml

      - name: Upload code coverage artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: code-coverage
          path: code-coverage/coverage.xml

      # As an alternative to run-tests, you can use run-command to execute a MATLAB script, function, or statement.
      #- name: Run all tests
      #  uses: matlab-actions/run-command@v1
      #  with:
      #    command: addpath('code'); results = runtests('IncludeSubfolders', true); assertSuccess(results);
